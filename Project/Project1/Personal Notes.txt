nama repo: corewebapisample
trus push ke repo

Database gratis:
- Postgre heroku
* heroku postgre
* import database
* 

- Free mysql online

------------------------------

[Heroku Link] = https://final-projects-1-dean.herokuapp.com/

Change database to:
Latin-1
Latin-1-general-ci

After that = Migrate

------------------------------

[Accounts]

  "username": "dean1@bootcamp.com",
  "email": "dean1@bootcamp.com",
  "password": "Passw0rd1@1"

------------------------------

[appsettings.json]

Secret for JwtConfig = wddasnyuhzwpgvvsunzllsvanzlnliez

[MySQL ConnectionString]
Startup.cs = UseMySql
"obj_name" : "Server=localhost;Port=3306;Database=assignment3;Uid=root;Pwd="

[SQL Server ConnectionString]
Startup.cs = UseSqlServer
"obj_name" : "server=(local); database=UnitTest; Trusted_Connection=True;"
"DbConnection" : "Server=localhost;Port=3306;Database=assignment3;Uid=root;Pwd="

[SQLite ConnectionString]
Startup.cs = UseSqlite
"obj_name" : "DataSource=app.db;Cache=Shared"

------------------------------

[Swagger in Docker]

docker run -p 80:80 swaggerapi/swagger-ui
docker run -p 80:80 -e SWAGGER_JSON=/ProjectApp/swagger.json -v /bar:/ProjectApp swaggerapi/swagger-ui
docker run -p 80:80 -e SWAGGER_JSON=/foo/swagger.json -v /bar:/foo swaggerapi/swagger-ui

------------------------------

[FINAL PROJECT]

database migrations:
- dotnet ef migrations add "Initial Migrations"
- dotnet ef database update
- Columns = id, title, description, done

- dotnet ef migrations add "Adding authentication to our Api"
- dotnet ef database update
- Columns = username, email, password
- Must have in Project-1

- dotnet ef migrations add "Added refresh tokens table"
- dotnet ef database update
- Columns = token, refreshtoken
- Must have in Project-1


- dotnet ef migrations add "initial"
- dotnet ef database update
- Table = Employees
- Columns = Id, Name, Designation

------------------------------

[running docker]

Start-Process 'C:\Program Files\Docker\Docker\Docker Desktop.exe'

docker run -d -p 80:80 docker/getting-started

-d - run the container in detached mode (in the background)
-p 80:80 - map port 80 of the host to port 80 in the container
docker/getting-started - the image to use

--------------------------------

dotnet publish -c Release (Untuk bikin .dll)

--------------------------------

[THE STEPS PLEASE LOOK HERE]

dotnet build (create dll)
dotnet build -c Release
dotnet build --no-restore -c Release -o /app (create dll if forgot after docker build)
docker build -t [NAMA_APP]:dev .
//docker build -t carter-api .
docker run -d -p 5000:80 --name [desiredname] [environmentname]:dev
//docker run -d -p 5000:80 --name CharterApi WebService:dev
[ini bagian push api ke git]
heroku login	
heroku update
heroku git:remote -a carter-api-dean (ini repository di heroku)
heroku buildpacks:set jincod/dotnetcore
[ini bagian konekin heroku ke git]
c# buildpacks link = https://buildpack-registry.s3.amazonaws.com/buildpacks/jincod/dotnetcore.tgz
Ke web heroku buat deploy
Enable auto deploy

Heroku link = https://carter-api-dean.herokuapp.com/ deployed to Heroku

--------------------------------

docker pull mcr.microsoft.com/dotnet/sdk

--------------------------------

docker pull mcr.microsoft.com/dotnet/sdk:5.0.403

--------------------------------

heroku container:push web -a carter-api

--------------------------------

[.dockerignore]

**/.dockerignore
**/.git
**/.gitignore
**/.vs
**/.vscode
**/*.*proj.user
**/bin
**/obj

--------------------------------

[Dockerfile]

#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443
EXPOSE 48719
EXPOSE 27017
EXPOSE 5000
EXPOSE 5001

FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
WORKDIR /src
COPY . .

#COPY ["CoreWebApi/CoreWebApi.csproj", "CoreWebApi/"]
#RUN dotnet restore "CoreWebApi/CoreWebApi.csproj"
#COPY . .
#WORKDIR "/src/CoreWebApi"
#RUN dotnet build "CoreWebApi.csproj" -c Release -o /app/build

RUN dotnet restore 
RUN dotnet build --no-restore -c Release -o /app

FROM build AS publish
RUN dotnet publish "CoreWebApi.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
#COPY --from=publish /app/publish .
COPY --from=publish /app/ .
#ENTRYPOINT ["dotnet", "CoreWebApi.dll"]
CMD ASPNETCORE_URLS=http://*:$PORT dotnet CoreWebApi.dll

---------------------------------------------------------

docker scan

---------------------------------------------------------

[FROM TODOAPP]

dotnet new webapi -n "TodoAppWithJWT" -lang "C#" -au none
cd TodoAppWithJWT
dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 5.0.11
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 5.0.11
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 5.0.11
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 5.0.11
dotnet add package Microsoft.AspNetCore.Identity.UI --version 5.0.11
dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.11
dotnet add package Pomelo.EntityFrameworkCore.MySql --version 5.0.0-alpha.2
dotnet add package MySql.EntityFrameworkCore --version 5.0.8
dotnet remove package Pomelo.EntityFrameworkCore.MySql
dotnet remove package MySql.Data.EntityFrameworkCore
dotnet add package Pomelo.EntityFrameworkCore.MySql 5.0.0-alpha.1.20513.5
//dotnet add package Microsoft.EntityFrameworkCore --version 5.0.11
//dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.11
MySql.Data" Version="8.0.27"